<?xml version='1.0' encoding='utf-8'?>
<doc><id>Coursera_388</id><course_url>https://www.coursera.org/learn/sas-viya-rest-api-python-r</course_url><course_name>Using SAS Viya REST APIs with Python and R</course_name><course_platform>Coursera</course_platform><course_instructor>Jordan Bakerman</course_instructor><course_introduction>SAS Viya is an in-memory distributed environment used to analyze big data quickly and efficiently. In this course, you’ll learn how to use the SAS Viya APIs to take control of SAS Cloud Analytic Services from a Jupyter Notebook using R or Python. You’ll learn to upload data into the cloud, analyze data, and create predictive models with SAS Viya using familiar open source functionality via the SWAT package -- the SAS Scripting Wrapper for Analytics Transfer. You’ll learn how to create both machine learning and deep learning models to tackle a variety of data sets and complex problems. And once SAS Viya has done the heavy lifting, you’ll be able to download data to the client and use native open source syntax to compare results and create graphics.</course_introduction><course_category>Browse.Data Science.Data Analysis</course_category><course_tag /><course_rating /><course_orgnization>SAS</course_orgnization><course_chapter>Course Overview//SAS®  Viya®  and Open Source Integration//Machine Learning//Text Analytics//Deep Learning//Time Series//Image Classification//Factorization Machines</course_chapter><course_sub_chapter>[['Course Overview'], ['SAS Approach to Open Source Integration', 'Cloud Analytic Services', 'Jupyter Notebooks and Open Source Development Interfaces', 'SAS Scripting Wrapper for Analytics Transfer', 'CAS Actions in SAS Viya', 'Connecting to CAS and Reading in Data', 'DataFrames and CAS Tables on the Clients and Server', 'Advantages to Open Source Integration', 'Demo: Getting Started with CAS and the R API', 'Demo: Getting Started with CAS and the Python API'], ['Introduction to Predictive Modeling', 'Data Partitioning: Preventing Overfitting', 'Logistic Regression Models', 'Support Vector Machines', 'Decision Trees', 'Ensemble of Trees', 'Neural Network Models', 'Autotuning Hyperparameters', 'Model Performance Assessment', 'Model Performance Charts: ROC and Lift', 'Demo: Using the R API to Create and Assess Models', 'Demo: Using the Python API to Create and Assess Models', 'Demo: Creating a Gradient Boosting Model in SAS Studio', 'Demo: Using R Functions and Looping for Efficient Coding', 'Demo: Using Python Functions and Looping for Efficient Coding'], ['Text Analytics', 'Natural and Formal Languages', 'Processing Words', 'Processing Context', 'Processing Concepts', 'Extracting Information from the Term-Document Matrix', 'Word Embedding', 'Demo: Using the R API to Explore Text Documents', 'Demo: Using the Python API to Explore Text Documents'], ['Traditional Neural Networks', 'Hidden Unit Activation Functions', 'Weight Initialization', 'Regularization Methods', 'Nonlinear Optimization Algorithms (or Gradient-Based Learning)', 'Processors for Analytics', 'Deep Neural Networks (DNN) versus Recurrent Neural Networks (RNN)', 'Recurrent Neural Network Architecture', 'Improving RNN Models', 'Gated Recurrent Unit (GRU)', 'Long Short-Term Memory (LSTM)', 'Demo: Deep Learning Sentiment Prediction Using the R API', 'Demo: Deep Learning Sentiment Prediction Using the Python API'], ['Time Series Forecasting', 'Model Performance and Assessment', 'Weighted Averages', 'Simple Exponential Smoothing', 'ARIMAX Models and Stationarity', 'Autoregressive and Moving Average Terms', 'Forecasting with Recurrent Neural Networks', 'Demo: Automatic Forecasting Using the R API', 'Demo: Automatic Forecasting Using the Python API', 'Demo: Deep Learning Forecasting Using the R API', 'Demo: Deep Learning Forecasting Using the Python API'], ['Image Classification and Object Detection', 'Convolutional Neural Networks for Image Classification', 'Convolution Layers', 'Pooling Layers', 'Fully Connected and Output Layers', 'Demo: Classifying Color Images Using the R API', 'Demo: Classifying Color Images Using the Python API'], ['Recommender Systems', 'Factorization Machines for Recommendation', 'Demo: Modeling Sparse Data Using the R API', 'Demo: Modeling Sparse Data Using the Python API']]</course_sub_chapter><course_time>Approx. 17 hours to complete</course_time><reviews>[]</reviews><reviewers>[]</reviewers><review_date>[]</review_date></doc>