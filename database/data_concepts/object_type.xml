<doc><id>object_type</id><concept_name>object type</concept_name><wiki>In computer science, an object type (a.k.a. wrapping object) is a datatype that is used in object-oriented programming to wrap a non-object type to make it look like a dynamic object.[citation needed]
Some object-oriented programming languages make a distinction between reference and value types, often referred to as objects and non-objects on platforms where complex value types don't exist, for reasons such as runtime efficiency and syntax or semantic issues. For example, Java has primitive wrapper classes corresponding to each primitive type: Integer and int, Character and char, Float and float, etc. Languages like C++ have little or no notion of reference type; thus, the use of object type is of little interest.
Boxing, otherwise known as wrapping, is the process of placing a primitive type within an object so that the primitive can be used as a reference object. For example, in Java, a LinkedList can change its size, but an array must have a fixed size. One might desire to have a LinkedList of int, but the LinkedList class only lists references to dynamic objects&#8212;it cannot list primitive types, which are value types.
To circumvent this, int can be boxed into Integer, which are dynamic objects, and then added to a LinkedList of Integer. (Using generic parameterized types introduced in J2SE 5.0, this type is represented as LinkedList&lt;Integer&gt;.)
On the other hand, C# has no primitive wrapper classes, but allows boxing of any value type, returning a generic Object reference.
</wiki></doc>