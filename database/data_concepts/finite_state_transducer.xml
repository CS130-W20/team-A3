<doc><id>finite_state_transducer</id><concept_name>finite state transducer</concept_name><wiki>A finite-state transducer (FST) is a finite-state machine with two memory tapes, following the terminology for Turing machines: an input tape and an output tape. This contrasts with an ordinary finite-state automaton, which has a single tape.  An FST is a type of finite-state automaton that maps between two sets of symbols.[1]  An FST is more general than a finite-state automaton (FSA).  An FSA defines a formal language by defining a set of accepted strings, while an FST defines relations between sets of strings.
An FST will read a set of strings on the input tape and generates a set of relations on the output tape.  An FST can be thought of as a translator or relater between strings in a set.
In morphological parsing, an example would be inputting a string of letters into the FST, the FST would then output a string of morphemes.
An automaton can be said to recognize a string if we view the content of its tape as input.  In other words, the automaton computes a function that maps strings into the set {0,1}.  Alternatively, we can say that an automaton generates strings, which means viewing its tape as an output tape.  On this view, the automaton generates a formal language, which is a set of strings.  The two views of automata are equivalent: the function that the automaton computes is precisely the indicator function of the set of strings it generates.  The class of languages generated by finite automata is known as the class of regular languages.
</wiki></doc>