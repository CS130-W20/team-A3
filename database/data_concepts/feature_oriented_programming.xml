<doc><id>feature_oriented_programming</id><concept_name>feature oriented programming</concept_name><wiki>In computer programming, feature-oriented programming (FOP) or feature-oriented software development (FOSD) is a programming paradigm for program generation in software product lines (SPLs) and for incremental development of programs.
FOSD arose out of layer-based designs and levels of abstraction in network protocols and extensible database systems in the late-1980s.[1]  A program was a stack of layers. Each layer added functionality to previously composed layers and different compositions of layers produced different programs.   Not surprisingly, there was a need for a compact language to express such designs.  Elementary algebra fit the bill: each layer was a function (a program transformation) that added new code to an existing program to produce a new program, and a program's design was modeled by an expression, i.e., a composition of transformations (layers).  The figure to the left illustrates the stacking of layers i, j, and h (where h is on the bottom and i is on the top). The algebraic notations i(j(h)), i&#8226;j&#8226;h, and i+j+h have been used to express these designs.
Over time, layers were equated to features, where a feature is an increment in program functionality. The paradigm for program design and generation was recognized to be an outgrowth of relational query optimization, where query evaluation programs were defined as relational algebra expressions, and query optimization was expression optimization.[2] A software product line is a family of programs where each program is defined by a unique composition of features. FOSD has since evolved into the study of feature modularity, tools, analyses, and design techniques to support feature-based program generation.
The second generation of FOSD research was on feature interactions, which originated in telecommunications.
Later, the term feature-oriented programming was coined;[3] this work exposed interactions between layers. Interactions require features to be adapted when composed with other features.
</wiki></doc>