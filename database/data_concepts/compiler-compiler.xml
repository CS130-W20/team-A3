<doc><id>compiler-compiler</id><concept_name>compiler-compiler</concept_name><wiki>
In computer science, a compiler-compiler or compiler generator is a programming tool that creates a parser, interpreter, or compiler from some form of formal description of a programming language and machine. 
The most common type of compiler-compiler is more precisely called a parser generator, and only handles syntactic analysis: its input is a grammar, typically written in Backus&#8211;Naur form (BNF) or extended Backus&#8211;Naur form (EBNF) that defines the syntax of a programming language; and its output is source code of a parser for the programming language. Parser generators do not handle the semantics of the programming language, or the generation of machine code for the target machine.[1]
A metacompiler is a software development tool used mainly in the construction of compilers, translators, and interpreters for other programming languages.[2] The input to a metacompiler is a computer program written in a specialized programming metalanguage designed mainly for the purpose of constructing compilers.[2][3][4] The language of the compiler produced is called the object language. The minimal input producing a compiler is a metaprogram specifying the object language grammar and semantic transformations into an object program.[3][4][5]
A typical parser generator associates executable code with each of the rules of the grammar that should be executed when these rules are applied by the parser. These pieces of code are sometimes referred to as semantic action routines since they define the semantics of the syntactic structure that is analyzed by the parser. Depending upon the type of parser that should be generated, these routines may construct a parse tree (or abstract syntax tree), or generate executable code directly.
</wiki></doc>