<doc><id>maskable_interrupt</id><concept_name>maskable interrupt</concept_name><wiki>In digital computers, an interrupt is an input signal to the processor indicating an event that needs immediate attention. An interrupt signal alerts the processor and serves as a request for the processor to interrupt the currently executing code, so that the event can be processed in a timely manner. If the request is accepted, the processor responds by suspending its current activities, saving its state, and executing a function called an interrupt handler (or an interrupt service routine, ISR) to deal with the event. This interruption is temporary, and, unless the interrupt indicates a fatal error, the processor resumes normal activities after the interrupt handler finishes.[1]
Interrupts are commonly used by hardware devices to indicate electronic or physical state changes that require attention. Interrupts are also commonly used to implement computer multitasking, especially in real-time computing. Systems that use interrupts in these ways are said to be interrupt-driven.[2]
Interrupt signals may be issued in response to hardware or software events. These are classified as hardware interrupts or software interrupts, respectively. For any particular processor, the number of hardware interrupts is limited by the number of interrupt request (IRQ) signals to the processor, whereas the number of software interrupts is determined by the processor's instruction set design.
A hardware interrupt request (IRQ) is an electronic signal issued by a hardware device which is external to the processor, to communicate that the device needs attention from the operating system (OS)[3] or, if there is no OS, from the "bare-metal" program running on the CPU. Such external devices may be part of the computer (e.g., disk controller) or they may be external peripherals. For example, pressing a keyboard key or moving the mouse triggers hardware interrupts that cause the processor to read the keystroke or mouse position.
</wiki></doc>