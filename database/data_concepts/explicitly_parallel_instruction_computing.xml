<doc><id>explicitly_parallel_instruction_computing</id><concept_name>explicitly parallel instruction computing</concept_name><wiki>Explicitly parallel instruction computing (EPIC) is a term coined in 1997 by the HP&#8211;Intel alliance[1] to describe a computing paradigm that researchers had been investigating since the early 1980s.[2] This paradigm is also called Independence architectures. It was the basis for Intel and HP development of the Intel Itanium architecture,[3] and HP later asserted that "EPIC" was merely an old term for the Itanium architecture.[4] EPIC permits microprocessors to execute software instructions in parallel by using the compiler, rather than complex on-die circuitry, to control parallel instruction execution. This was intended to allow simple performance scaling without resorting to higher clock frequencies.
By 1989, researchers at HP recognized that reduced instruction set computer (RISC) architectures were reaching a limit at one instruction per cycle.[clarification needed] They began an investigation into a new architecture, later named EPIC.[3] The basis for the research was VLIW, in which multiple operations are encoded in every instruction, and then processed by multiple execution units.
One goal of EPIC was to move the complexity of instruction scheduling from the CPU hardware to the software compiler, which can do the instruction scheduling statically (with help of trace feedback information). This eliminates the need for complex scheduling circuitry in the CPU, which frees up space and power for other functions, including additional execution resources. An equally important goal was to further exploit instruction level parallelism (ILP) by using the compiler to find and exploit additional opportunities for parallel execution.
VLIW (at least the original forms) has several short-comings that precluded it from becoming mainstream:
</wiki></doc>