<doc><id>data_redundancy</id><concept_name>data redundancy</concept_name><wiki>In computer main memory, auxiliary storage and computer buses, data redundancy is the existence of data that is additional to the actual data and permits correction of errors in stored or transmitted data. The additional data can simply be a complete copy of the actual data, or only select pieces of data that allow detection of errors and reconstruction of lost or damaged data up to a certain level.
For example, by including additional data checksums, ECC memory is capable of detecting and correcting single-bit errors within each memory word, while RAID&#160;1 combines two hard disk drives (HDDs) into a logical storage unit that allows stored data to survive a complete failure of one drive.[1][2]  Data redundancy can also be used as a measure against silent data corruption; for example, file systems such as Btrfs and ZFS use data and metadata checksumming in combination with copies of stored data to detect silent data corruption and repair its effects.[3]
While different in nature, data redundancy also occurs in database systems that have values repeated unnecessarily in one or more records or fields, within a table, or where the field is replicated/repeated in two or more tables. Often this is found in Unnormalized database designs and results in the complication of database management, introducing the risk of corrupting the data, and increasing the required amount of storage.  When done on purpose from a previously normalized database schema, it may be considered a form of database denormalization; used to improve performance of database queries (shorten the database response time).
For instance, when customer data are duplicated and attached with each product bought, then redundancy of data is a known source of inconsistency since a given customer might appear with different values for one or more of their attributes.[4] Data redundancy leads to data anomalies and corruption and generally should be avoided by design;[5] applying database normalization prevents redundancy and makes the best possible usage of storage.[6]
</wiki></doc>