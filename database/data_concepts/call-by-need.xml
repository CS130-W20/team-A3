<doc><id>call-by-need</id><concept_name>call-by-need</concept_name><wiki>Evaluation strategies are used by programming languages to determine two things&#8212;when to evaluate the arguments of a function call and what kind of value to pass to the function.
To illustrate, a function application may evaluate the argument before evaluating the function's body and pass the ability to look up the argument's current value and modify it via assignment.[1] The notion of reduction strategy in lambda calculus is similar but distinct.
In practical terms, many modern programming languages like C# and Java have converged on a call-by-value/call-by-reference evaluation strategy for function calls.[clarification needed] Some languages, especially lower-level languages such as C++, combine several notions of parameter passing. Historically, call by value and call by name date back to ALGOL 60, which was designed in the late 1950s. Call by reference is used by PL/I and some Fortran systems.[2] Purely functional languages like Haskell, as well as non-purely functional languages like R, use call by need.
Evaluation strategy is specified by the programming language definition, and is not a function of any specific implementation.
</wiki></doc>