<doc><id>object_request_broker</id><concept_name>object request broker</concept_name><wiki>In distributed computing, an object request broker (ORB) is a middleware which allows program calls to be made from one computer to another via a computer network, providing location transparency through remote procedure calls.  ORBs promote interoperability of distributed object systems, enabling such systems to be built by piecing together objects from different vendors, while different parts communicate with each other via the ORB.
ORBs handle the transformation of in-process data structures to and from the raw byte sequence, which is transmitted over the network.  This is called marshalling or serialization.  In addition to marshalling data, ORBs often expose many more features, such as distributed transactions, directory services or real-time scheduling.  Some ORBs, such as CORBA-compliant systems, use an interface description language to describe the data that is to be transmitted on remote calls.[1][2]
In object-oriented languages, an ORB actually provides a framework which enables remote objects to be used over the network, in the same way as if they were local and part of the same process.  On the client side, so-called stub objects are created and invoked, serving as the only part visible and used inside the client application.  After the stub's methods are invoked, client-side ORB performs the marshalling of invocation data, and forwards the request to the server-side ORB.  On the server side, ORB locates the targeted object, executes the requested operation, and returns the results.  Having the results available, client's ORB performs the demarshalling and passes the results back into the invoked stub, making them available to the client application.  The whole process is transparent, resulting in remote objects appearing as if they were local.[1]

</wiki></doc>